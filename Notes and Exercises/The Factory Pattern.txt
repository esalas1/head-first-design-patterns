# The Factory Pattern
- Factories handle the details of object creation.


---
### *Exercise: How might you take all parts of your application that instantiate concrete classes and separate or encapculate them from the rest of the applcation?*
- Move this process over to a class that takes care of instantiating 
these objects. Encapsulate the process that creates these classes. 
---
### *Exercise: How can we use object composition to swap in and out of implementations in our PizzaStore?*
- We can add variations of the original Pizza creator with specific differences that fulfill the user's needs.
---

## Factory Method
- Handles object creation and encapsulates it in a subclass.
- The superclass and client do not know what kind of object is being created in the subclass.
- The Factory Pattern method encapsulates object creation by 
lettings subclasses decide what objects to create.

## Factory Pattern Method in our Pizza Store
- In our case, the factory method is CreatePizza();
- This abstract method is defined by the concrete subclasses and define a specific object
of their choice.
- We can see an example of parallel heirarchies if we study the structure of the PizzaStore and Pizza classes.
- In our case, both the PiizaStore and Piiza classes are abastract classes that are extended by
the concrete subclasses which manage the desired implementation.

## Abstract Factory Pattern
- provides an interface for creating a family of related objects but does
not specify the concrete classes. 